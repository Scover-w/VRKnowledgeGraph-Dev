//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/VRKGUnity/Scripts/ViveFocus3InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ViveFocus3InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ViveFocus3InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ViveFocus3InputActions"",
    ""maps"": [
        {
            ""name"": ""LeftHand"",
            ""id"": ""272f6d14-89ba-496f-b7ff-215263d3219f"",
            ""actions"": [
                {
                    ""name"": ""TriggerPress"",
                    ""type"": ""Button"",
                    ""id"": ""578a0cd6-f388-4fa3-92f3-c09338bdf6fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""5c8cf249-a01c-4b19-8eea-152b951f6a5a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""204073bf-582e-48f4-a392-6eaf1e637387"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""48a4f982-c501-412c-a715-b9201cb08c37"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e91ffee7-ec69-40fb-8663-4ebf07153bfe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""0e72db49-759e-4b56-853f-a5e3b9bf0e04"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary2DAxis1"",
                    ""type"": ""Value"",
                    ""id"": ""b767974d-1da4-446f-943d-4ac9e453d0e9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""d36e4b01-3a25-4dc6-8094-179ddb10bd71"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""416d6df4-7244-4b5c-986c-11881e0eac57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""26a9b492-9ead-4e86-9484-d69dc44c512e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPress"",
                    ""type"": ""Button"",
                    ""id"": ""e91897d7-06ef-41b9-aaa2-b14ae7540fca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""1414e4ef-05d7-40b1-b759-aa2c2c9cee56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""83a06fa6-147b-41c5-9841-1fd2bbb33c31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""f5ebdec1-74ea-495e-9d38-bf2bd3c27a18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""05cb1556-4c3c-4ed4-90e0-493ee81f98a5"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPosition"",
                    ""type"": ""Value"",
                    ""id"": ""016fba43-5925-456c-a865-176f8fb04583"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripRotation"",
                    ""type"": ""Value"",
                    ""id"": ""6d9180b6-b425-44c5-a4df-fff615dbb37c"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b9c19907-3b5c-4207-ad18-5a86655f688c"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec353a5a-6a7a-4ee6-a33e-d12a8c0b705a"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a98fe1d-5477-4473-9ed1-05d2decb2c15"",
                    ""path"": ""<XRController>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3dfde460-9bef-4bd9-943d-170adc171ff8"",
                    ""path"": ""<XRController>{LeftHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9603ae96-fef3-432c-88a0-282232c1368d"",
                    ""path"": ""<XRController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""171f2010-aff7-4c02-8e86-44c84eba40e6"",
                    ""path"": ""<XRController>{LeftHand}/system"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54ac7ab0-8ca9-4cbc-a6d1-da5ee0b055cb"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85d45408-e658-4df8-ab60-de9273ceb30c"",
                    ""path"": ""<XRController>{LeftHand}/{primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a07f0bb7-9d68-4288-b0f1-78c62a995fa4"",
                    ""path"": ""<XRController>{LeftHand}/{primary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26245d74-dc1a-4fce-a7e1-1d4688ef73b1"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1458d4ea-a188-4ad0-9215-0e48997da150"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c3f7ce0-b62f-44e2-a1e1-11f143de72d7"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cfe2a5d-28c1-425b-998e-810968e19292"",
                    ""path"": ""<XRController>{LeftHand}/secondaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b48c4a7b-44af-4134-abee-0c8bffd98460"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e95798de-27b1-4590-aa5e-2cbad92c1f5d"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ee4cbbb-09f9-47b3-bb6e-b162f66811ae"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7be1a513-d15a-4768-9bc5-98733fc3e426"",
                    ""path"": ""<XRController>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""839e85b1-7fd8-40b6-9a86-7faad3c46c7e"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxis1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand"",
            ""id"": ""fd87d126-5dc2-445c-82df-1abc6c9f8076"",
            ""actions"": [
                {
                    ""name"": ""TriggerPress"",
                    ""type"": ""Button"",
                    ""id"": ""bc163c5e-01a5-48ae-83b3-87e68f24f888"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Value"",
                    ""id"": ""2fccaf18-d578-4ac9-9d0b-08db4a2e1dc7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""b87d0657-0e2f-41f9-92ee-6c7f0b0fa4f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""7612bd2d-ec25-4cb7-8eb2-3a4b7704b025"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""561d782c-0eab-4674-80c5-7a8eb70cf246"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxis"",
                    ""type"": ""Value"",
                    ""id"": ""273526bd-c3ba-4f35-ac7a-840c1ed6ab6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Primary2DAxisClick"",
                    ""type"": ""Button"",
                    ""id"": ""1c531107-9819-4f1f-a0e7-f11166016436"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary2DAxisTouch"",
                    ""type"": ""Button"",
                    ""id"": ""4de79a39-d622-4859-8f67-791365c0b780"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grip"",
                    ""type"": ""Value"",
                    ""id"": ""f17f4516-fcdf-4891-9411-fee4983cd798"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPress"",
                    ""type"": ""Button"",
                    ""id"": ""c20d8054-3d24-478f-8c51-5df4fec8c02a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""cba87b5e-c43b-4c38-b5dc-320d8fbb6136"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Button"",
                    ""id"": ""b20f3aa0-32c6-486d-a9b2-4d8baca0799f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""2f8b53a9-be2d-4aaa-b6d6-9b2138db087e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""b0f47772-6d4d-4c5e-b3df-be42f6eb4d08"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripPosition"",
                    ""type"": ""Value"",
                    ""id"": ""9715692b-ec5b-4264-9731-c02780e67179"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripRotation"",
                    ""type"": ""Value"",
                    ""id"": ""a6f17fc0-706e-459c-9915-2064d4928217"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2185573-2cbd-4af0-9d4b-e03ff8b24d8f"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""TriggerPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d1bf452d-b059-4c1e-9c23-3be1c6be789e"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d09e2fdd-08b3-42eb-86c8-5c3a8f4a03c5"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0657f0e8-4c3b-45d4-a00b-fda175a6684d"",
                    ""path"": ""<XRController>{RightHand}/primaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3d9acf1-00ab-4616-951f-ef81d04d4d58"",
                    ""path"": ""<XRController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""369648ca-da2c-4cb7-bb0c-8b7dcab3b6b5"",
                    ""path"": ""<XRController>{RightHand}/system"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""488857b2-965c-486c-b24e-e21628ad2a07"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feccb40e-4fa1-488f-a2f1-f44c2b80ae37"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisClick}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxisClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62761c89-0d6d-40f1-ae88-88fa58d7ff02"",
                    ""path"": ""<XRController>{RightHand}/{primary2DAxisTouch}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Primary2DAxisTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c3d836-9c35-4647-a506-9e03f37d837f"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Grip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f0b2479-b471-4775-8381-980b7957af20"",
                    ""path"": ""<XRController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d0fd645-57e1-48c3-9393-701a1d96c9a2"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d034f83-a2ec-4c56-8a45-74443b36bb77"",
                    ""path"": ""<XRController>{RightHand}/secondaryTouched"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977795e1-ef6f-426e-858e-b7b8151f3155"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b661f593-2a31-4709-af51-f7766d7216df"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""GripRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""feb31894-3534-423c-87f6-936d7bdf1b26"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""315373cc-615f-4390-ba81-e7a1144edc74"",
                    ""path"": ""<XRController>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""HMD"",
            ""id"": ""21d522e0-0295-43ef-b60a-3b355794717b"",
            ""actions"": [
                {
                    ""name"": ""hmdPosition"",
                    ""type"": ""Value"",
                    ""id"": ""36a3121d-efce-478c-867c-a8d354777b78"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""hmdRotation"",
                    ""type"": ""Value"",
                    ""id"": ""4e56a29d-b0cc-42fd-a087-552950afac95"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""hmdIsTracked"",
                    ""type"": ""Button"",
                    ""id"": ""0d953964-67bf-4ea6-bb27-9e884103cff8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""hmdTrackingState"",
                    ""type"": ""Value"",
                    ""id"": ""f74b1ce2-faff-412e-b551-d06154b148be"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""08f50b61-5d92-42ac-bdb9-b898a4f0d4a7"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09769104-56ee-4fae-9065-07f530388e75"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1499c2a-440f-4f14-9ead-19750b5f55c6"",
                    ""path"": ""<XRHMD>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdIsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35d2c302-7e4b-4ebd-9588-359667eb9244"",
                    ""path"": ""<XRHMD>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hmdTrackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""a725e4f4-1262-4d6f-8a52-b8ba368d4c82"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7d87f920-38ab-4a79-9716-27722a02c594"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""devicePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""29b17da5-a5a4-4efc-8df8-53c38152ca3f"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""deviceRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bb79fb67-d610-4f01-b622-28ad8c58967d"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""78d62036-f819-477f-ba34-5041450a668f"",
                    ""path"": ""<XRController>/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86e542ef-3633-4fc3-91c8-660f2a56440a"",
                    ""path"": ""<XRController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""devicePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fd6ccdd-ff43-4332-bc47-5a21b0012fa2"",
                    ""path"": ""<XRController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""deviceRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftTracker"",
            ""id"": ""7d1307ed-04cd-4b89-a4c6-4315f39148af"",
            ""actions"": [
                {
                    ""name"": ""isTracked"",
                    ""type"": ""Button"",
                    ""id"": ""e7e490ab-ebbd-4fc3-9422-8ff82d83e4b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""trackingState"",
                    ""type"": ""Value"",
                    ""id"": ""48875a63-ca9b-430d-ae37-53b6b8ac7211"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""181b5827-702d-4dc7-a7df-b3213cebce1d"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""42ebf811-6132-4e50-808f-d7bf72f4f601"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""menuButton"",
                    ""type"": ""Button"",
                    ""id"": ""f1a69644-9236-4420-986a-3b8d617456da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""primaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""941e321b-3559-4ec0-a830-5e829e4b8346"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c8ba7c47-340a-48a2-a684-77ff620af208"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""isTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84864f01-2f19-4bc4-857f-a37c3729f2b2"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60afff68-1ba9-4070-9de3-6124d183d13b"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b61b5a68-6e89-4588-a0a8-698c6f03eb97"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67aef8b7-205a-48a1-acc7-81c6d9941e48"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""menuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dff1093f-d2f3-41c1-abae-b6ca128bc1b1"",
                    ""path"": ""<ViveWaveWristTracker>{LeftHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""primaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightTracker"",
            ""id"": ""72e4e8d4-24aa-4eda-b9ed-aafb8de3e3f5"",
            ""actions"": [
                {
                    ""name"": ""isTracked"",
                    ""type"": ""Button"",
                    ""id"": ""31591888-277d-41be-8209-3a530561281b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""trackingState"",
                    ""type"": ""Value"",
                    ""id"": ""4e6212cf-ee63-4910-abfe-3cf0afe2300c"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""position"",
                    ""type"": ""Value"",
                    ""id"": ""7e1be448-70fb-4b40-8b4a-29cea395af51"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""rotation"",
                    ""type"": ""Value"",
                    ""id"": ""7917ae1a-5e7a-404d-996f-873b088f5175"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""menuButton"",
                    ""type"": ""Button"",
                    ""id"": ""363525ed-0af9-4870-abc1-b70a9899d52f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""primaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""dff46915-a533-46c8-838b-84e9df3eca39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f2fbc32b-acab-47c7-8f24-d77ed99a85e4"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""isTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb3070ee-129a-4c4a-bea0-4b1222097e12"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackingState"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""728772a0-1bdd-4fdb-b561-a2261780af4c"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""431f566c-8296-497d-a766-420898141466"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/rotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7acbe3a7-c214-4f3c-a3cc-dc1d29c7159d"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/menuButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""menuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""933c8d2b-eaae-4966-a71a-88d61631623b"",
                    ""path"": ""<ViveWaveWristTracker>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""primaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftHand Locomotion"",
            ""id"": ""0e5fbaef-153f-4e72-913d-8f6100beca93"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""86063f28-ffc6-4d05-96ef-29a998ab3786"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""555f7990-decb-4932-ac42-a5029f169539"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""3554dfe6-8c34-4f70-8120-d96320c88eff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""ebcd5a12-77f6-4e8d-8ce6-41f000830b21"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""4e9cbc4b-f824-4ddc-9114-b6282c42190d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""853190cd-c762-4bf1-b81a-eb519642fe30"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""d85e65ec-a3b9-42a1-87d3-e1f3cc980442"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0e441083-1dc0-48f0-99df-c556f512af78"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7290eb68-437c-491b-9eb8-54ee8efbfa42"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0f2ea17c-4f44-4470-aeed-14b6fae76fd9"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c78f54b-9d68-4f2a-9d49-aa9f03131faa"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb63309a-2e2e-468b-91c0-48e8917c610f"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f339d24a-9f58-466f-9800-906eb2a5cb2b"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2825bf5d-178d-4e82-88fc-aefb8a605b20"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RightHand Locomotion"",
            ""id"": ""617b199d-f448-4e2d-ad9a-e828a82f1669"",
            ""actions"": [
                {
                    ""name"": ""Teleport Select"",
                    ""type"": ""Value"",
                    ""id"": ""fda716d5-0587-463d-b92d-4e39267c4df4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Activate"",
                    ""type"": ""Value"",
                    ""id"": ""42f8f558-0e78-4c95-8ad1-12bd8ccb33ba"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Teleport Mode Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""16e14168-562b-49e8-ae71-5d96d9a32ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Teleport Direction"",
                    ""type"": ""Value"",
                    ""id"": ""1da11df6-8c00-434a-8b95-68b170b677c1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""ebee8266-0e3a-4022-bcec-6fa03b60c2e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6e87bf94-a78f-477b-8b5b-a1355d4a5eaa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Snap Turn"",
                    ""type"": ""Value"",
                    ""id"": ""1b076490-a993-4f1d-81b0-1d987608628e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""04699325-369c-4398-a877-f2ced8c5ce0a"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=-1,sweepBehavior=3)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82f453f0-8fa0-4293-a724-547a5b132a09"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=1)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Mode Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1aeb3b8-553e-4480-aad2-0feced14a7ad"",
                    ""path"": ""<XRController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Mode Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfb0a430-35c7-4915-b0ee-1ac916d75267"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Teleport Direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad53fe6-427e-473b-b3c7-95dfde2be7dc"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0193e9e2-f819-482d-92f5-de96b7b5bad8"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a92e115-0ba7-47d8-9c3a-91f8bc463aa7"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3c21068-5e8a-4753-b4dd-d3f2f3c6d2f1"",
                    ""path"": ""<XRController>{RightHand}/thumbstick"",
                    ""interactions"": ""Sector(directions=12,sweepBehavior=1),Sector(directions=2,sweepBehavior=2)"",
                    ""processors"": """",
                    ""groups"": ""XR Usage"",
                    ""action"": ""Snap Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""XR Usage"",
            ""bindingGroup"": ""XR Usage"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_TriggerPress = m_LeftHand.FindAction("TriggerPress", throwIfNotFound: true);
        m_LeftHand_Trigger = m_LeftHand.FindAction("Trigger", throwIfNotFound: true);
        m_LeftHand_PrimaryButton = m_LeftHand.FindAction("PrimaryButton", throwIfNotFound: true);
        m_LeftHand_PrimaryTouch = m_LeftHand.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_LeftHand_Menu = m_LeftHand.FindAction("Menu", throwIfNotFound: true);
        m_LeftHand_Primary2DAxis = m_LeftHand.FindAction("Primary2DAxis", throwIfNotFound: true);
        m_LeftHand_Primary2DAxis1 = m_LeftHand.FindAction("Primary2DAxis1", throwIfNotFound: true);
        m_LeftHand_Primary2DAxisClick = m_LeftHand.FindAction("Primary2DAxisClick", throwIfNotFound: true);
        m_LeftHand_Primary2DAxisTouch = m_LeftHand.FindAction("Primary2DAxisTouch", throwIfNotFound: true);
        m_LeftHand_Grip = m_LeftHand.FindAction("Grip", throwIfNotFound: true);
        m_LeftHand_GripPress = m_LeftHand.FindAction("GripPress", throwIfNotFound: true);
        m_LeftHand_SecondaryButton = m_LeftHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_LeftHand_SecondaryTouch = m_LeftHand.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_LeftHand_IsTracked = m_LeftHand.FindAction("IsTracked", throwIfNotFound: true);
        m_LeftHand_TrackingState = m_LeftHand.FindAction("TrackingState", throwIfNotFound: true);
        m_LeftHand_GripPosition = m_LeftHand.FindAction("GripPosition", throwIfNotFound: true);
        m_LeftHand_GripRotation = m_LeftHand.FindAction("GripRotation", throwIfNotFound: true);
        // RightHand
        m_RightHand = asset.FindActionMap("RightHand", throwIfNotFound: true);
        m_RightHand_TriggerPress = m_RightHand.FindAction("TriggerPress", throwIfNotFound: true);
        m_RightHand_Trigger = m_RightHand.FindAction("Trigger", throwIfNotFound: true);
        m_RightHand_PrimaryButton = m_RightHand.FindAction("PrimaryButton", throwIfNotFound: true);
        m_RightHand_PrimaryTouch = m_RightHand.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_RightHand_Menu = m_RightHand.FindAction("Menu", throwIfNotFound: true);
        m_RightHand_Primary2DAxis = m_RightHand.FindAction("Primary2DAxis", throwIfNotFound: true);
        m_RightHand_Primary2DAxisClick = m_RightHand.FindAction("Primary2DAxisClick", throwIfNotFound: true);
        m_RightHand_Primary2DAxisTouch = m_RightHand.FindAction("Primary2DAxisTouch", throwIfNotFound: true);
        m_RightHand_Grip = m_RightHand.FindAction("Grip", throwIfNotFound: true);
        m_RightHand_GripPress = m_RightHand.FindAction("GripPress", throwIfNotFound: true);
        m_RightHand_SecondaryButton = m_RightHand.FindAction("SecondaryButton", throwIfNotFound: true);
        m_RightHand_SecondaryTouch = m_RightHand.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_RightHand_IsTracked = m_RightHand.FindAction("IsTracked", throwIfNotFound: true);
        m_RightHand_TrackingState = m_RightHand.FindAction("TrackingState", throwIfNotFound: true);
        m_RightHand_GripPosition = m_RightHand.FindAction("GripPosition", throwIfNotFound: true);
        m_RightHand_GripRotation = m_RightHand.FindAction("GripRotation", throwIfNotFound: true);
        // HMD
        m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
        m_HMD_hmdPosition = m_HMD.FindAction("hmdPosition", throwIfNotFound: true);
        m_HMD_hmdRotation = m_HMD.FindAction("hmdRotation", throwIfNotFound: true);
        m_HMD_hmdIsTracked = m_HMD.FindAction("hmdIsTracked", throwIfNotFound: true);
        m_HMD_hmdTrackingState = m_HMD.FindAction("hmdTrackingState", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_devicePosition = m_UI.FindAction("devicePosition", throwIfNotFound: true);
        m_UI_deviceRotation = m_UI.FindAction("deviceRotation", throwIfNotFound: true);
        // LeftTracker
        m_LeftTracker = asset.FindActionMap("LeftTracker", throwIfNotFound: true);
        m_LeftTracker_isTracked = m_LeftTracker.FindAction("isTracked", throwIfNotFound: true);
        m_LeftTracker_trackingState = m_LeftTracker.FindAction("trackingState", throwIfNotFound: true);
        m_LeftTracker_position = m_LeftTracker.FindAction("position", throwIfNotFound: true);
        m_LeftTracker_rotation = m_LeftTracker.FindAction("rotation", throwIfNotFound: true);
        m_LeftTracker_menuButton = m_LeftTracker.FindAction("menuButton", throwIfNotFound: true);
        m_LeftTracker_primaryButton = m_LeftTracker.FindAction("primaryButton", throwIfNotFound: true);
        // RightTracker
        m_RightTracker = asset.FindActionMap("RightTracker", throwIfNotFound: true);
        m_RightTracker_isTracked = m_RightTracker.FindAction("isTracked", throwIfNotFound: true);
        m_RightTracker_trackingState = m_RightTracker.FindAction("trackingState", throwIfNotFound: true);
        m_RightTracker_position = m_RightTracker.FindAction("position", throwIfNotFound: true);
        m_RightTracker_rotation = m_RightTracker.FindAction("rotation", throwIfNotFound: true);
        m_RightTracker_menuButton = m_RightTracker.FindAction("menuButton", throwIfNotFound: true);
        m_RightTracker_primaryButton = m_RightTracker.FindAction("primaryButton", throwIfNotFound: true);
        // LeftHand Locomotion
        m_LeftHandLocomotion = asset.FindActionMap("LeftHand Locomotion", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportSelect = m_LeftHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportModeActivate = m_LeftHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportModeCancel = m_LeftHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_LeftHandLocomotion_TeleportDirection = m_LeftHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_LeftHandLocomotion_Turn = m_LeftHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_LeftHandLocomotion_Move = m_LeftHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_LeftHandLocomotion_SnapTurn = m_LeftHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
        // RightHand Locomotion
        m_RightHandLocomotion = asset.FindActionMap("RightHand Locomotion", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportSelect = m_RightHandLocomotion.FindAction("Teleport Select", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportModeActivate = m_RightHandLocomotion.FindAction("Teleport Mode Activate", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportModeCancel = m_RightHandLocomotion.FindAction("Teleport Mode Cancel", throwIfNotFound: true);
        m_RightHandLocomotion_TeleportDirection = m_RightHandLocomotion.FindAction("Teleport Direction", throwIfNotFound: true);
        m_RightHandLocomotion_Turn = m_RightHandLocomotion.FindAction("Turn", throwIfNotFound: true);
        m_RightHandLocomotion_Move = m_RightHandLocomotion.FindAction("Move", throwIfNotFound: true);
        m_RightHandLocomotion_SnapTurn = m_RightHandLocomotion.FindAction("Snap Turn", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private List<ILeftHandActions> m_LeftHandActionsCallbackInterfaces = new List<ILeftHandActions>();
    private readonly InputAction m_LeftHand_TriggerPress;
    private readonly InputAction m_LeftHand_Trigger;
    private readonly InputAction m_LeftHand_PrimaryButton;
    private readonly InputAction m_LeftHand_PrimaryTouch;
    private readonly InputAction m_LeftHand_Menu;
    private readonly InputAction m_LeftHand_Primary2DAxis;
    private readonly InputAction m_LeftHand_Primary2DAxis1;
    private readonly InputAction m_LeftHand_Primary2DAxisClick;
    private readonly InputAction m_LeftHand_Primary2DAxisTouch;
    private readonly InputAction m_LeftHand_Grip;
    private readonly InputAction m_LeftHand_GripPress;
    private readonly InputAction m_LeftHand_SecondaryButton;
    private readonly InputAction m_LeftHand_SecondaryTouch;
    private readonly InputAction m_LeftHand_IsTracked;
    private readonly InputAction m_LeftHand_TrackingState;
    private readonly InputAction m_LeftHand_GripPosition;
    private readonly InputAction m_LeftHand_GripRotation;
    public struct LeftHandActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public LeftHandActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerPress => m_Wrapper.m_LeftHand_TriggerPress;
        public InputAction @Trigger => m_Wrapper.m_LeftHand_Trigger;
        public InputAction @PrimaryButton => m_Wrapper.m_LeftHand_PrimaryButton;
        public InputAction @PrimaryTouch => m_Wrapper.m_LeftHand_PrimaryTouch;
        public InputAction @Menu => m_Wrapper.m_LeftHand_Menu;
        public InputAction @Primary2DAxis => m_Wrapper.m_LeftHand_Primary2DAxis;
        public InputAction @Primary2DAxis1 => m_Wrapper.m_LeftHand_Primary2DAxis1;
        public InputAction @Primary2DAxisClick => m_Wrapper.m_LeftHand_Primary2DAxisClick;
        public InputAction @Primary2DAxisTouch => m_Wrapper.m_LeftHand_Primary2DAxisTouch;
        public InputAction @Grip => m_Wrapper.m_LeftHand_Grip;
        public InputAction @GripPress => m_Wrapper.m_LeftHand_GripPress;
        public InputAction @SecondaryButton => m_Wrapper.m_LeftHand_SecondaryButton;
        public InputAction @SecondaryTouch => m_Wrapper.m_LeftHand_SecondaryTouch;
        public InputAction @IsTracked => m_Wrapper.m_LeftHand_IsTracked;
        public InputAction @TrackingState => m_Wrapper.m_LeftHand_TrackingState;
        public InputAction @GripPosition => m_Wrapper.m_LeftHand_GripPosition;
        public InputAction @GripRotation => m_Wrapper.m_LeftHand_GripRotation;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Add(instance);
            @TriggerPress.started += instance.OnTriggerPress;
            @TriggerPress.performed += instance.OnTriggerPress;
            @TriggerPress.canceled += instance.OnTriggerPress;
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Primary2DAxis.started += instance.OnPrimary2DAxis;
            @Primary2DAxis.performed += instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled += instance.OnPrimary2DAxis;
            @Primary2DAxis1.started += instance.OnPrimary2DAxis1;
            @Primary2DAxis1.performed += instance.OnPrimary2DAxis1;
            @Primary2DAxis1.canceled += instance.OnPrimary2DAxis1;
            @Primary2DAxisClick.started += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled += instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled += instance.OnPrimary2DAxisTouch;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @GripPress.started += instance.OnGripPress;
            @GripPress.performed += instance.OnGripPress;
            @GripPress.canceled += instance.OnGripPress;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
        }

        private void UnregisterCallbacks(ILeftHandActions instance)
        {
            @TriggerPress.started -= instance.OnTriggerPress;
            @TriggerPress.performed -= instance.OnTriggerPress;
            @TriggerPress.canceled -= instance.OnTriggerPress;
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Primary2DAxis.started -= instance.OnPrimary2DAxis;
            @Primary2DAxis.performed -= instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled -= instance.OnPrimary2DAxis;
            @Primary2DAxis1.started -= instance.OnPrimary2DAxis1;
            @Primary2DAxis1.performed -= instance.OnPrimary2DAxis1;
            @Primary2DAxis1.canceled -= instance.OnPrimary2DAxis1;
            @Primary2DAxisClick.started -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled -= instance.OnPrimary2DAxisTouch;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @GripPress.started -= instance.OnGripPress;
            @GripPress.performed -= instance.OnGripPress;
            @GripPress.canceled -= instance.OnGripPress;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
        }

        public void RemoveCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);

    // RightHand
    private readonly InputActionMap m_RightHand;
    private List<IRightHandActions> m_RightHandActionsCallbackInterfaces = new List<IRightHandActions>();
    private readonly InputAction m_RightHand_TriggerPress;
    private readonly InputAction m_RightHand_Trigger;
    private readonly InputAction m_RightHand_PrimaryButton;
    private readonly InputAction m_RightHand_PrimaryTouch;
    private readonly InputAction m_RightHand_Menu;
    private readonly InputAction m_RightHand_Primary2DAxis;
    private readonly InputAction m_RightHand_Primary2DAxisClick;
    private readonly InputAction m_RightHand_Primary2DAxisTouch;
    private readonly InputAction m_RightHand_Grip;
    private readonly InputAction m_RightHand_GripPress;
    private readonly InputAction m_RightHand_SecondaryButton;
    private readonly InputAction m_RightHand_SecondaryTouch;
    private readonly InputAction m_RightHand_IsTracked;
    private readonly InputAction m_RightHand_TrackingState;
    private readonly InputAction m_RightHand_GripPosition;
    private readonly InputAction m_RightHand_GripRotation;
    public struct RightHandActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public RightHandActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TriggerPress => m_Wrapper.m_RightHand_TriggerPress;
        public InputAction @Trigger => m_Wrapper.m_RightHand_Trigger;
        public InputAction @PrimaryButton => m_Wrapper.m_RightHand_PrimaryButton;
        public InputAction @PrimaryTouch => m_Wrapper.m_RightHand_PrimaryTouch;
        public InputAction @Menu => m_Wrapper.m_RightHand_Menu;
        public InputAction @Primary2DAxis => m_Wrapper.m_RightHand_Primary2DAxis;
        public InputAction @Primary2DAxisClick => m_Wrapper.m_RightHand_Primary2DAxisClick;
        public InputAction @Primary2DAxisTouch => m_Wrapper.m_RightHand_Primary2DAxisTouch;
        public InputAction @Grip => m_Wrapper.m_RightHand_Grip;
        public InputAction @GripPress => m_Wrapper.m_RightHand_GripPress;
        public InputAction @SecondaryButton => m_Wrapper.m_RightHand_SecondaryButton;
        public InputAction @SecondaryTouch => m_Wrapper.m_RightHand_SecondaryTouch;
        public InputAction @IsTracked => m_Wrapper.m_RightHand_IsTracked;
        public InputAction @TrackingState => m_Wrapper.m_RightHand_TrackingState;
        public InputAction @GripPosition => m_Wrapper.m_RightHand_GripPosition;
        public InputAction @GripRotation => m_Wrapper.m_RightHand_GripRotation;
        public InputActionMap Get() { return m_Wrapper.m_RightHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Add(instance);
            @TriggerPress.started += instance.OnTriggerPress;
            @TriggerPress.performed += instance.OnTriggerPress;
            @TriggerPress.canceled += instance.OnTriggerPress;
            @Trigger.started += instance.OnTrigger;
            @Trigger.performed += instance.OnTrigger;
            @Trigger.canceled += instance.OnTrigger;
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Primary2DAxis.started += instance.OnPrimary2DAxis;
            @Primary2DAxis.performed += instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled += instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed += instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled += instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed += instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled += instance.OnPrimary2DAxisTouch;
            @Grip.started += instance.OnGrip;
            @Grip.performed += instance.OnGrip;
            @Grip.canceled += instance.OnGrip;
            @GripPress.started += instance.OnGripPress;
            @GripPress.performed += instance.OnGripPress;
            @GripPress.canceled += instance.OnGripPress;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @IsTracked.started += instance.OnIsTracked;
            @IsTracked.performed += instance.OnIsTracked;
            @IsTracked.canceled += instance.OnIsTracked;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @GripPosition.started += instance.OnGripPosition;
            @GripPosition.performed += instance.OnGripPosition;
            @GripPosition.canceled += instance.OnGripPosition;
            @GripRotation.started += instance.OnGripRotation;
            @GripRotation.performed += instance.OnGripRotation;
            @GripRotation.canceled += instance.OnGripRotation;
        }

        private void UnregisterCallbacks(IRightHandActions instance)
        {
            @TriggerPress.started -= instance.OnTriggerPress;
            @TriggerPress.performed -= instance.OnTriggerPress;
            @TriggerPress.canceled -= instance.OnTriggerPress;
            @Trigger.started -= instance.OnTrigger;
            @Trigger.performed -= instance.OnTrigger;
            @Trigger.canceled -= instance.OnTrigger;
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Primary2DAxis.started -= instance.OnPrimary2DAxis;
            @Primary2DAxis.performed -= instance.OnPrimary2DAxis;
            @Primary2DAxis.canceled -= instance.OnPrimary2DAxis;
            @Primary2DAxisClick.started -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.performed -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisClick.canceled -= instance.OnPrimary2DAxisClick;
            @Primary2DAxisTouch.started -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.performed -= instance.OnPrimary2DAxisTouch;
            @Primary2DAxisTouch.canceled -= instance.OnPrimary2DAxisTouch;
            @Grip.started -= instance.OnGrip;
            @Grip.performed -= instance.OnGrip;
            @Grip.canceled -= instance.OnGrip;
            @GripPress.started -= instance.OnGripPress;
            @GripPress.performed -= instance.OnGripPress;
            @GripPress.canceled -= instance.OnGripPress;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @IsTracked.started -= instance.OnIsTracked;
            @IsTracked.performed -= instance.OnIsTracked;
            @IsTracked.canceled -= instance.OnIsTracked;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @GripPosition.started -= instance.OnGripPosition;
            @GripPosition.performed -= instance.OnGripPosition;
            @GripPosition.canceled -= instance.OnGripPosition;
            @GripRotation.started -= instance.OnGripRotation;
            @GripRotation.performed -= instance.OnGripRotation;
            @GripRotation.canceled -= instance.OnGripRotation;
        }

        public void RemoveCallbacks(IRightHandActions instance)
        {
            if (m_Wrapper.m_RightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandActions @RightHand => new RightHandActions(this);

    // HMD
    private readonly InputActionMap m_HMD;
    private List<IHMDActions> m_HMDActionsCallbackInterfaces = new List<IHMDActions>();
    private readonly InputAction m_HMD_hmdPosition;
    private readonly InputAction m_HMD_hmdRotation;
    private readonly InputAction m_HMD_hmdIsTracked;
    private readonly InputAction m_HMD_hmdTrackingState;
    public struct HMDActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public HMDActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @hmdPosition => m_Wrapper.m_HMD_hmdPosition;
        public InputAction @hmdRotation => m_Wrapper.m_HMD_hmdRotation;
        public InputAction @hmdIsTracked => m_Wrapper.m_HMD_hmdIsTracked;
        public InputAction @hmdTrackingState => m_Wrapper.m_HMD_hmdTrackingState;
        public InputActionMap Get() { return m_Wrapper.m_HMD; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
        public void AddCallbacks(IHMDActions instance)
        {
            if (instance == null || m_Wrapper.m_HMDActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HMDActionsCallbackInterfaces.Add(instance);
            @hmdPosition.started += instance.OnHmdPosition;
            @hmdPosition.performed += instance.OnHmdPosition;
            @hmdPosition.canceled += instance.OnHmdPosition;
            @hmdRotation.started += instance.OnHmdRotation;
            @hmdRotation.performed += instance.OnHmdRotation;
            @hmdRotation.canceled += instance.OnHmdRotation;
            @hmdIsTracked.started += instance.OnHmdIsTracked;
            @hmdIsTracked.performed += instance.OnHmdIsTracked;
            @hmdIsTracked.canceled += instance.OnHmdIsTracked;
            @hmdTrackingState.started += instance.OnHmdTrackingState;
            @hmdTrackingState.performed += instance.OnHmdTrackingState;
            @hmdTrackingState.canceled += instance.OnHmdTrackingState;
        }

        private void UnregisterCallbacks(IHMDActions instance)
        {
            @hmdPosition.started -= instance.OnHmdPosition;
            @hmdPosition.performed -= instance.OnHmdPosition;
            @hmdPosition.canceled -= instance.OnHmdPosition;
            @hmdRotation.started -= instance.OnHmdRotation;
            @hmdRotation.performed -= instance.OnHmdRotation;
            @hmdRotation.canceled -= instance.OnHmdRotation;
            @hmdIsTracked.started -= instance.OnHmdIsTracked;
            @hmdIsTracked.performed -= instance.OnHmdIsTracked;
            @hmdIsTracked.canceled -= instance.OnHmdIsTracked;
            @hmdTrackingState.started -= instance.OnHmdTrackingState;
            @hmdTrackingState.performed -= instance.OnHmdTrackingState;
            @hmdTrackingState.canceled -= instance.OnHmdTrackingState;
        }

        public void RemoveCallbacks(IHMDActions instance)
        {
            if (m_Wrapper.m_HMDActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHMDActions instance)
        {
            foreach (var item in m_Wrapper.m_HMDActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HMDActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HMDActions @HMD => new HMDActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_devicePosition;
    private readonly InputAction m_UI_deviceRotation;
    public struct UIActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public UIActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @devicePosition => m_Wrapper.m_UI_devicePosition;
        public InputAction @deviceRotation => m_Wrapper.m_UI_deviceRotation;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @devicePosition.started += instance.OnDevicePosition;
            @devicePosition.performed += instance.OnDevicePosition;
            @devicePosition.canceled += instance.OnDevicePosition;
            @deviceRotation.started += instance.OnDeviceRotation;
            @deviceRotation.performed += instance.OnDeviceRotation;
            @deviceRotation.canceled += instance.OnDeviceRotation;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @devicePosition.started -= instance.OnDevicePosition;
            @devicePosition.performed -= instance.OnDevicePosition;
            @devicePosition.canceled -= instance.OnDevicePosition;
            @deviceRotation.started -= instance.OnDeviceRotation;
            @deviceRotation.performed -= instance.OnDeviceRotation;
            @deviceRotation.canceled -= instance.OnDeviceRotation;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // LeftTracker
    private readonly InputActionMap m_LeftTracker;
    private List<ILeftTrackerActions> m_LeftTrackerActionsCallbackInterfaces = new List<ILeftTrackerActions>();
    private readonly InputAction m_LeftTracker_isTracked;
    private readonly InputAction m_LeftTracker_trackingState;
    private readonly InputAction m_LeftTracker_position;
    private readonly InputAction m_LeftTracker_rotation;
    private readonly InputAction m_LeftTracker_menuButton;
    private readonly InputAction m_LeftTracker_primaryButton;
    public struct LeftTrackerActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public LeftTrackerActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @isTracked => m_Wrapper.m_LeftTracker_isTracked;
        public InputAction @trackingState => m_Wrapper.m_LeftTracker_trackingState;
        public InputAction @position => m_Wrapper.m_LeftTracker_position;
        public InputAction @rotation => m_Wrapper.m_LeftTracker_rotation;
        public InputAction @menuButton => m_Wrapper.m_LeftTracker_menuButton;
        public InputAction @primaryButton => m_Wrapper.m_LeftTracker_primaryButton;
        public InputActionMap Get() { return m_Wrapper.m_LeftTracker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftTrackerActions set) { return set.Get(); }
        public void AddCallbacks(ILeftTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftTrackerActionsCallbackInterfaces.Add(instance);
            @isTracked.started += instance.OnIsTracked;
            @isTracked.performed += instance.OnIsTracked;
            @isTracked.canceled += instance.OnIsTracked;
            @trackingState.started += instance.OnTrackingState;
            @trackingState.performed += instance.OnTrackingState;
            @trackingState.canceled += instance.OnTrackingState;
            @position.started += instance.OnPosition;
            @position.performed += instance.OnPosition;
            @position.canceled += instance.OnPosition;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
            @menuButton.started += instance.OnMenuButton;
            @menuButton.performed += instance.OnMenuButton;
            @menuButton.canceled += instance.OnMenuButton;
            @primaryButton.started += instance.OnPrimaryButton;
            @primaryButton.performed += instance.OnPrimaryButton;
            @primaryButton.canceled += instance.OnPrimaryButton;
        }

        private void UnregisterCallbacks(ILeftTrackerActions instance)
        {
            @isTracked.started -= instance.OnIsTracked;
            @isTracked.performed -= instance.OnIsTracked;
            @isTracked.canceled -= instance.OnIsTracked;
            @trackingState.started -= instance.OnTrackingState;
            @trackingState.performed -= instance.OnTrackingState;
            @trackingState.canceled -= instance.OnTrackingState;
            @position.started -= instance.OnPosition;
            @position.performed -= instance.OnPosition;
            @position.canceled -= instance.OnPosition;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
            @menuButton.started -= instance.OnMenuButton;
            @menuButton.performed -= instance.OnMenuButton;
            @menuButton.canceled -= instance.OnMenuButton;
            @primaryButton.started -= instance.OnPrimaryButton;
            @primaryButton.performed -= instance.OnPrimaryButton;
            @primaryButton.canceled -= instance.OnPrimaryButton;
        }

        public void RemoveCallbacks(ILeftTrackerActions instance)
        {
            if (m_Wrapper.m_LeftTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftTrackerActions @LeftTracker => new LeftTrackerActions(this);

    // RightTracker
    private readonly InputActionMap m_RightTracker;
    private List<IRightTrackerActions> m_RightTrackerActionsCallbackInterfaces = new List<IRightTrackerActions>();
    private readonly InputAction m_RightTracker_isTracked;
    private readonly InputAction m_RightTracker_trackingState;
    private readonly InputAction m_RightTracker_position;
    private readonly InputAction m_RightTracker_rotation;
    private readonly InputAction m_RightTracker_menuButton;
    private readonly InputAction m_RightTracker_primaryButton;
    public struct RightTrackerActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public RightTrackerActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @isTracked => m_Wrapper.m_RightTracker_isTracked;
        public InputAction @trackingState => m_Wrapper.m_RightTracker_trackingState;
        public InputAction @position => m_Wrapper.m_RightTracker_position;
        public InputAction @rotation => m_Wrapper.m_RightTracker_rotation;
        public InputAction @menuButton => m_Wrapper.m_RightTracker_menuButton;
        public InputAction @primaryButton => m_Wrapper.m_RightTracker_primaryButton;
        public InputActionMap Get() { return m_Wrapper.m_RightTracker; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightTrackerActions set) { return set.Get(); }
        public void AddCallbacks(IRightTrackerActions instance)
        {
            if (instance == null || m_Wrapper.m_RightTrackerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightTrackerActionsCallbackInterfaces.Add(instance);
            @isTracked.started += instance.OnIsTracked;
            @isTracked.performed += instance.OnIsTracked;
            @isTracked.canceled += instance.OnIsTracked;
            @trackingState.started += instance.OnTrackingState;
            @trackingState.performed += instance.OnTrackingState;
            @trackingState.canceled += instance.OnTrackingState;
            @position.started += instance.OnPosition;
            @position.performed += instance.OnPosition;
            @position.canceled += instance.OnPosition;
            @rotation.started += instance.OnRotation;
            @rotation.performed += instance.OnRotation;
            @rotation.canceled += instance.OnRotation;
            @menuButton.started += instance.OnMenuButton;
            @menuButton.performed += instance.OnMenuButton;
            @menuButton.canceled += instance.OnMenuButton;
            @primaryButton.started += instance.OnPrimaryButton;
            @primaryButton.performed += instance.OnPrimaryButton;
            @primaryButton.canceled += instance.OnPrimaryButton;
        }

        private void UnregisterCallbacks(IRightTrackerActions instance)
        {
            @isTracked.started -= instance.OnIsTracked;
            @isTracked.performed -= instance.OnIsTracked;
            @isTracked.canceled -= instance.OnIsTracked;
            @trackingState.started -= instance.OnTrackingState;
            @trackingState.performed -= instance.OnTrackingState;
            @trackingState.canceled -= instance.OnTrackingState;
            @position.started -= instance.OnPosition;
            @position.performed -= instance.OnPosition;
            @position.canceled -= instance.OnPosition;
            @rotation.started -= instance.OnRotation;
            @rotation.performed -= instance.OnRotation;
            @rotation.canceled -= instance.OnRotation;
            @menuButton.started -= instance.OnMenuButton;
            @menuButton.performed -= instance.OnMenuButton;
            @menuButton.canceled -= instance.OnMenuButton;
            @primaryButton.started -= instance.OnPrimaryButton;
            @primaryButton.performed -= instance.OnPrimaryButton;
            @primaryButton.canceled -= instance.OnPrimaryButton;
        }

        public void RemoveCallbacks(IRightTrackerActions instance)
        {
            if (m_Wrapper.m_RightTrackerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightTrackerActions instance)
        {
            foreach (var item in m_Wrapper.m_RightTrackerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightTrackerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightTrackerActions @RightTracker => new RightTrackerActions(this);

    // LeftHand Locomotion
    private readonly InputActionMap m_LeftHandLocomotion;
    private List<ILeftHandLocomotionActions> m_LeftHandLocomotionActionsCallbackInterfaces = new List<ILeftHandLocomotionActions>();
    private readonly InputAction m_LeftHandLocomotion_TeleportSelect;
    private readonly InputAction m_LeftHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_LeftHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_LeftHandLocomotion_TeleportDirection;
    private readonly InputAction m_LeftHandLocomotion_Turn;
    private readonly InputAction m_LeftHandLocomotion_Move;
    private readonly InputAction m_LeftHandLocomotion_SnapTurn;
    public struct LeftHandLocomotionActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public LeftHandLocomotionActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_LeftHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_LeftHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_LeftHandLocomotion_TeleportModeCancel;
        public InputAction @TeleportDirection => m_Wrapper.m_LeftHandLocomotion_TeleportDirection;
        public InputAction @Turn => m_Wrapper.m_LeftHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_LeftHandLocomotion_Move;
        public InputAction @SnapTurn => m_Wrapper.m_LeftHandLocomotion_SnapTurn;
        public InputActionMap Get() { return m_Wrapper.m_LeftHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILeftHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportModeActivate.started += instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
        }

        private void UnregisterCallbacks(ILeftHandLocomotionActions instance)
        {
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
        }

        public void RemoveCallbacks(ILeftHandLocomotionActions instance)
        {
            if (m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILeftHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LeftHandLocomotionActions @LeftHandLocomotion => new LeftHandLocomotionActions(this);

    // RightHand Locomotion
    private readonly InputActionMap m_RightHandLocomotion;
    private List<IRightHandLocomotionActions> m_RightHandLocomotionActionsCallbackInterfaces = new List<IRightHandLocomotionActions>();
    private readonly InputAction m_RightHandLocomotion_TeleportSelect;
    private readonly InputAction m_RightHandLocomotion_TeleportModeActivate;
    private readonly InputAction m_RightHandLocomotion_TeleportModeCancel;
    private readonly InputAction m_RightHandLocomotion_TeleportDirection;
    private readonly InputAction m_RightHandLocomotion_Turn;
    private readonly InputAction m_RightHandLocomotion_Move;
    private readonly InputAction m_RightHandLocomotion_SnapTurn;
    public struct RightHandLocomotionActions
    {
        private @ViveFocus3InputActions m_Wrapper;
        public RightHandLocomotionActions(@ViveFocus3InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TeleportSelect => m_Wrapper.m_RightHandLocomotion_TeleportSelect;
        public InputAction @TeleportModeActivate => m_Wrapper.m_RightHandLocomotion_TeleportModeActivate;
        public InputAction @TeleportModeCancel => m_Wrapper.m_RightHandLocomotion_TeleportModeCancel;
        public InputAction @TeleportDirection => m_Wrapper.m_RightHandLocomotion_TeleportDirection;
        public InputAction @Turn => m_Wrapper.m_RightHandLocomotion_Turn;
        public InputAction @Move => m_Wrapper.m_RightHandLocomotion_Move;
        public InputAction @SnapTurn => m_Wrapper.m_RightHandLocomotion_SnapTurn;
        public InputActionMap Get() { return m_Wrapper.m_RightHandLocomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RightHandLocomotionActions set) { return set.Get(); }
        public void AddCallbacks(IRightHandLocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Add(instance);
            @TeleportSelect.started += instance.OnTeleportSelect;
            @TeleportSelect.performed += instance.OnTeleportSelect;
            @TeleportSelect.canceled += instance.OnTeleportSelect;
            @TeleportModeActivate.started += instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed += instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled += instance.OnTeleportModeActivate;
            @TeleportModeCancel.started += instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed += instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled += instance.OnTeleportModeCancel;
            @TeleportDirection.started += instance.OnTeleportDirection;
            @TeleportDirection.performed += instance.OnTeleportDirection;
            @TeleportDirection.canceled += instance.OnTeleportDirection;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SnapTurn.started += instance.OnSnapTurn;
            @SnapTurn.performed += instance.OnSnapTurn;
            @SnapTurn.canceled += instance.OnSnapTurn;
        }

        private void UnregisterCallbacks(IRightHandLocomotionActions instance)
        {
            @TeleportSelect.started -= instance.OnTeleportSelect;
            @TeleportSelect.performed -= instance.OnTeleportSelect;
            @TeleportSelect.canceled -= instance.OnTeleportSelect;
            @TeleportModeActivate.started -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.performed -= instance.OnTeleportModeActivate;
            @TeleportModeActivate.canceled -= instance.OnTeleportModeActivate;
            @TeleportModeCancel.started -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.performed -= instance.OnTeleportModeCancel;
            @TeleportModeCancel.canceled -= instance.OnTeleportModeCancel;
            @TeleportDirection.started -= instance.OnTeleportDirection;
            @TeleportDirection.performed -= instance.OnTeleportDirection;
            @TeleportDirection.canceled -= instance.OnTeleportDirection;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SnapTurn.started -= instance.OnSnapTurn;
            @SnapTurn.performed -= instance.OnSnapTurn;
            @SnapTurn.canceled -= instance.OnSnapTurn;
        }

        public void RemoveCallbacks(IRightHandLocomotionActions instance)
        {
            if (m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRightHandLocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RightHandLocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RightHandLocomotionActions @RightHandLocomotion => new RightHandLocomotionActions(this);
    private int m_XRUsageSchemeIndex = -1;
    public InputControlScheme XRUsageScheme
    {
        get
        {
            if (m_XRUsageSchemeIndex == -1) m_XRUsageSchemeIndex = asset.FindControlSchemeIndex("XR Usage");
            return asset.controlSchemes[m_XRUsageSchemeIndex];
        }
    }
    public interface ILeftHandActions
    {
        void OnTriggerPress(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnPrimary2DAxis(InputAction.CallbackContext context);
        void OnPrimary2DAxis1(InputAction.CallbackContext context);
        void OnPrimary2DAxisClick(InputAction.CallbackContext context);
        void OnPrimary2DAxisTouch(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnGripPress(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnSecondaryTouch(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnGripPosition(InputAction.CallbackContext context);
        void OnGripRotation(InputAction.CallbackContext context);
    }
    public interface IRightHandActions
    {
        void OnTriggerPress(InputAction.CallbackContext context);
        void OnTrigger(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnPrimary2DAxis(InputAction.CallbackContext context);
        void OnPrimary2DAxisClick(InputAction.CallbackContext context);
        void OnPrimary2DAxisTouch(InputAction.CallbackContext context);
        void OnGrip(InputAction.CallbackContext context);
        void OnGripPress(InputAction.CallbackContext context);
        void OnSecondaryButton(InputAction.CallbackContext context);
        void OnSecondaryTouch(InputAction.CallbackContext context);
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnGripPosition(InputAction.CallbackContext context);
        void OnGripRotation(InputAction.CallbackContext context);
    }
    public interface IHMDActions
    {
        void OnHmdPosition(InputAction.CallbackContext context);
        void OnHmdRotation(InputAction.CallbackContext context);
        void OnHmdIsTracked(InputAction.CallbackContext context);
        void OnHmdTrackingState(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnDevicePosition(InputAction.CallbackContext context);
        void OnDeviceRotation(InputAction.CallbackContext context);
    }
    public interface ILeftTrackerActions
    {
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnMenuButton(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
    }
    public interface IRightTrackerActions
    {
        void OnIsTracked(InputAction.CallbackContext context);
        void OnTrackingState(InputAction.CallbackContext context);
        void OnPosition(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnMenuButton(InputAction.CallbackContext context);
        void OnPrimaryButton(InputAction.CallbackContext context);
    }
    public interface ILeftHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportDirection(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSnapTurn(InputAction.CallbackContext context);
    }
    public interface IRightHandLocomotionActions
    {
        void OnTeleportSelect(InputAction.CallbackContext context);
        void OnTeleportModeActivate(InputAction.CallbackContext context);
        void OnTeleportModeCancel(InputAction.CallbackContext context);
        void OnTeleportDirection(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnSnapTurn(InputAction.CallbackContext context);
    }
}
